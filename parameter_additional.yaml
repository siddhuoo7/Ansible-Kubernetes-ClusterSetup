---
- hosts: master-nodes
  tasks:
  - name: Include vars
    include_vars: "config_var.yaml"
  - name: create name space load_balancer
    shell: |
      kubectl create ns {{ load_balancer_ns }}
    ignore_errors: yes
  - name: create name space operations
    shell: |
      kubectl create ns {{ operations_ns }}
    ignore_errors: yes
  - name: create name logging
    shell: |
      kubectl create ns {{ logging_ns }}
    ignore_errors: yes
  - name: create name space monitoring
    shell: |
      kubectl create ns {{ monitoring_ns }}
    ignore_errors: yes
  - name: create name space messaging
    shell: |
      kubectl create ns {{ messaging_ns }}
    ignore_errors: yes
  - name: create name space messaging
    shell: |
      kubectl create ns {{ zeebe_ns }}
    ignore_errors: yes
  - name: Deploying Rancher in docker
    shell: docker run --name rancher --restart=always -d -p 7000:80 -p 7010:443 -v rancher-data:/var/lib/rancher rancher/rancher:v2.3.5
    ignore_errors: yes
    when:
      - rancher == "true"

  - name: "Install Docker-Compose"
    shell: |
        curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
  - name: "install MetalLB Load Balancer"
    shell: |
        sed -i "s|namespace: load-balancer|namespace: {{ load_balancer_ns }}|g" /root/kube_additional/load-balancer/metallb.yaml
        kubectl create -f /root/kube_additional/load-balancer/metallb.yaml
        kubectl create secret generic -n {{ load_balancer_ns }} memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          namespace: {{ load_balancer_ns }}
          name: config
        data:
          config: |
            address-pools:
            - name: default
              protocol: layer2
              addresses:
              - {{ Loadbalancer_ip_range }}
        EOF
    ignore_errors: yes
    when:
      - loadBalancer == "true"
  - name: "Master ip address"
    debug:
      msg: "{{ ansible_eth0.ipv4.address }}"
  - name: "implementing nfs client provisioning"
    shell: |
        mkdir /srv/nfs/kubedata -p
        chown nobody: /srv/nfs/kubedata
        sudo systemctl enable nfs-server
        sudo systemctl start nfs-server
        cat > /etc/exports << EOF
        /srv/nfs/kubedata   *(rw,sync,no_subtree_check,no_root_squash,no_all_squash,insecure)
        EOF
        exportfs -rav
        helm repo add stable https://kubernetes-charts.storage.googleapis.com
        helm repo update
        #helm install nfs-client-provisioner stable/nfs-client-provisioner --set nfs.server=172.27.11.121 --set nfs.path=/srv/nfs/kubedata --set storageClass.defaultClass=true --namespace {{ operations_ns }}
        helm install nfs-client-provisioner stable/nfs-client-provisioner --set nfs.server={{ ansible_eth0.ipv4.address }} --set nfs.path=/srv/nfs/kubedata --set storageClass.defaultClass=true --namespace {{ operations_ns }}
        kubectl wait --for=condition=Ready pods --all -n {{ operations_ns }} --timeout=300s
        kubectl apply -f /root/kube_additional/logging/logging-pvc.yaml
    ignore_errors: yes
    when:
      - nfsUtil == "true"
  - name: "Deploying the elastic logShipper"
    shell: |
        #cd /root/kube_additional/logging/fluent-bit
        #kubectl apply -f .
        sed -i "s|namespace: logging|namespace: {{ logging_ns }}|g" /root/kube_additional/logging/filebeat.yml
        kubectl wait --for=condition=Ready pods --all -n {{ logging_ns }} --timeout=60s
        kubectl create -f /root/kube_additional/logging/filebeat.yml
    ignore_errors: yes
    when: 
      - elk == "true"
  - name: "Deploying Prometheus and Grafana"
    shell: |
        helm install grafana stable/grafana --values /root/kube_additional/monitoring/grafana.value -n {{ monitoring_ns }}
        helm install prometheus stable/prometheus --values  /root/kube_additional/monitoring/prometheus.value -n {{ monitoring_ns }}
    ignore_errors: yes
    when: 
      - grafana == "true"
  - name: "Deploying Kubernetes Event Exporter"
    shell: |
        sed -i "s|slack_token|{{ slack_token }}|g" /root/kube_additional/monitoring/eventExporter/01-config.yaml
        sed -i "s|slack_channel|{{ slack_channel }}|g" /root/kube_additional/monitoring/eventExporter/01-config.yaml
        kubectl create -f /root/kube_additional/monitoring/eventExporter
    ignore_errors: yes
    when: 
      - eventExport == "true"   
  - name:  installing metrics-server
    shell: |
        helm install metrics-server stable/metrics-server --namespace {{ operations_ns }} --values /root/kube_additional/operations/metrics-server.values
    ignore_errors: yes
    when: 
      - metrics == "true"
  - name: "installing pod auto scaler"
    shell: |
        kubectl apply -f /root/kube_additional/hpa
    ignore_errors: yes
    when: 
      - hpa == "true"
  - name: "Install WeaveScope"
    shell: |
        sed -i "s|namespace: monitoring|namespace: {{ monitoring_ns }}|g" /root/kube_additional/monitoring/weave.yaml
        kubectl apply -f /root/kube_additional/monitoring/weave.yaml
    ignore_errors: yes
    when: 
      - weave == "true"
  - name: "Deploying Mongo Database"
    shell: |
      kubectl create ns mongo
      kubectl apply -f /root/kube_additional/database/mongodb-workload.yaml -n mongo
      kubectl apply -f /root/kube_additional/database/mongodbDnsMap -f /root/kube_additional/database/pgadmin-workload.yaml -f /root/kube_additional/database/postgres-workload.yaml
    ignore_errors: yes
    when: 
      - mongo == "true"
  - name: "Deploying kafka"
    shell: |
        helm repo add strimzi https://strimzi.io/charts/
        helm install kafka strimzi/strimzi-kafka-operator -n kafka
        kubectl wait --for=condition=Ready pods --all -n {{ messaging_ns }}
        kubectl apply -f /root/kube_additional/messaging/kafka-prod.yaml -n kafka 
        kubectl apply -f /root/kube_additional/messaging/kafkaMapDns.yml
    ignore_errors: yes
    when: 
      - kafka == "true"
  - name: "Installing Kong API Gateway"
    shell: |
        kubectl create -f /root/kube_additional/load-balancer/kong.yaml
        kubectl patch -n kong svc kong-proxy --type='json' -p '[{"op":"replace","path":"/spec/loadBalancerIP","value":"{{kong_loadBalancerIP}}"}]'
    ignore_errors: yes
    when: 
      - kong == "true"
  - name: "Installing Zeebe"
    shell: |
        helm repo add zeebe https://helm.zeebe.io
        helm repo update
        helm install ecsfin zeebe/zeebe-full -n {{ zeebe_ns }}
    ignore_errors: yes
    when: 
      - zeebe == "true"
      


     